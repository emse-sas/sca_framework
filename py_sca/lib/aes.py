import numpy as np

S_BOX = np.array([
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
], dtype=np.ubyte)

R_CON = np.array([
    [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]
], dtype=np.ubyte).T

N_ROUNDS = 10


def xtime(x): return (x << 1) ^ (((x >> 7) & 1) * 0x1b)


def add_round_key(block, key):
    return block ^ key.T


def sub_bytes(block):
    ret = block.copy()
    ret[0] = np.fromiter(map(lambda b: S_BOX[b], ret[0]), dtype=np.ubyte)
    ret[1] = np.fromiter(map(lambda b: S_BOX[b], ret[1]), dtype=np.ubyte)
    ret[2] = np.fromiter(map(lambda b: S_BOX[b], ret[2]), dtype=np.ubyte)
    ret[3] = np.fromiter(map(lambda b: S_BOX[b], ret[3]), dtype=np.ubyte)
    return ret


def shift_rows(block):
    ret = block.copy()
    ret[1] = np.roll(ret[1], -1)
    ret[2] = np.roll(ret[2], -2)
    ret[3] = np.roll(ret[3], -3)
    return ret


def mix_columns(block):
    ret = block.copy()
    t = block[0]
    tmp = block[0] ^ block[1] ^ block[2] ^ block[3]
    ret[0] ^= xtime(block[0] ^ block[1]) ^ tmp
    ret[1] ^= xtime(block[1] ^ block[2]) ^ tmp
    ret[2] ^= xtime(block[2] ^ block[3]) ^ tmp
    ret[3] ^= xtime(block[3] ^ t) ^ tmp
    return ret


def sub_word(col):
    return np.fromiter(map(lambda b: S_BOX[b], col), dtype=np.ubyte)


def rot_word(col):
    return np.roll(col, -1)


class Stages:
    START = 0
    SUB_BYTES = 1
    SHIFT_ROWS = 2
    MIX_COLUMNS = 3
    ADD_ROUND_KEY = 4


class Handler:

    def __init__(self, key):
        self.blocks = np.zeros((N_ROUNDS + 1, 5, 4, 4), dtype=np.ubyte)
        self.keys = np.zeros((N_ROUNDS + 1, 4, 4), dtype=np.ubyte)
        self.keys[0] = key
        self._key_expansion()

    def encrypt(self, block):
        self.blocks[0][Stages.START] = np.copy(block)
        self.blocks[0][Stages.SUB_BYTES] = np.copy(block)
        self.blocks[0][Stages.SHIFT_ROWS] = np.copy(block)
        self.blocks[0][Stages.MIX_COLUMNS] = np.copy(block)
        self.blocks[0][Stages.ADD_ROUND_KEY] = add_round_key(self.blocks[0][3], self.keys[0])

        for n in range(1, N_ROUNDS):
            self.blocks[n][Stages.START] = self.blocks[n - 1][4].copy()
            self.blocks[n][Stages.SUB_BYTES] = sub_bytes(self.blocks[n][0])
            self.blocks[n][Stages.SHIFT_ROWS] = shift_rows(self.blocks[n][1])
            self.blocks[n][Stages.MIX_COLUMNS] = mix_columns(self.blocks[n][2])
            self.blocks[n][Stages.ADD_ROUND_KEY] = add_round_key(self.blocks[n][3], self.keys[n])

        self.blocks[N_ROUNDS][Stages.START] = self.blocks[N_ROUNDS - 1][4].copy()
        self.blocks[N_ROUNDS][Stages.SUB_BYTES] = sub_bytes(self.blocks[N_ROUNDS][0])
        self.blocks[N_ROUNDS][Stages.SHIFT_ROWS] = shift_rows(self.blocks[N_ROUNDS][1])
        self.blocks[N_ROUNDS][Stages.MIX_COLUMNS] = self.blocks[N_ROUNDS][2].copy()
        self.blocks[N_ROUNDS][Stages.ADD_ROUND_KEY] = add_round_key(self.blocks[N_ROUNDS][3], self.keys[N_ROUNDS])

        return self.blocks[-1][-1].copy()

    def decrypt(self):
        return self.blocks[-1][-1].copy()

    def _key_expansion(self):
        for n in range(1, N_ROUNDS + 1):
            self.keys[n][0] = R_CON[n - 1] ^ sub_word(rot_word(self.keys[n - 1][3])) ^ self.keys[n - 1][0]
            self.keys[n][1] = self.keys[n][0] ^ self.keys[n - 1][1]
            self.keys[n][2] = self.keys[n][1] ^ self.keys[n - 1][2]
            self.keys[n][3] = self.keys[n][2] ^ self.keys[n - 1][3]
